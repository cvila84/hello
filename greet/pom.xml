<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <prerequisites>
        <maven>3.3.9</maven>
    </prerequisites>

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.gemalto.telecom.ota</groupId>
    <artifactId>greet</artifactId>
    <packaging>war</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <name>Greet</name>
    <description>Hello is a project template for micro-services based on TomEE</description>

    <!-- *** CI/CD ***************************************************************************************** -->

    <ciManagement>
        <system>Jenkins</system>
        <url>http://jenkins.ota-cloud.mcs.forge.paas.gemalto.com/blue/organizations/jenkins/${project.artifactId}/detail/${project.artifactId}/${buildNumber}/pipeline</url>
    </ciManagement>

    <!-- *** SCM ******************************************************************************************* -->

    <scm>
        <url>https://vge1hg.gemalto.com/hg/TelcoSoft/SOFT-SOLUTIONS/AOTA/AOTA_CLOUD_2016/${project.artifactId}</url>
        <developerConnection>scm:hg:https://vge1hg.gemalto.com/hg/TelcoSoft/SOFT-SOLUTIONS/AOTA/AOTA_CLOUD_2016/${project.artifactId}</developerConnection>
    </scm>

    <!-- *** Issues tracking ********************************************************************************* -->

    <issueManagement>
        <system>JIRA</system>
        <url>https://jira.gemalto.com</url>
    </issueManagement>

    <!-- *** Distribution management ************************************************************************** -->
    <distributionManagement>
        <site>
            <id>nexus</id>
            <name>Releases</name>
            <url>dav:http://nexus.ota-cloud.mcs.forge.paas.gemalto.com/content/sites/site/${project.artifactId}/${project.version}</url>
        </site>
        <snapshotRepository>
            <id>snapshots</id>
            <url>https://nexusfreel1-emea.gemalto.com/content/repositories/SHP-RnD-Snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!-- *** Team members ********************************************************************************* -->

    <developers>
        <developer>
            <id>cvila</id>
            <name>Christophe Vila</name>
            <email>christophe.vila@thalesgroup.com</email>
            <roles>
                <role>developer</role>
            </roles>
            <properties>
                <picUrl>http://cnp.gemalto.com/User%20Photos/Profile%20Pictures/cvila_MThumb.jpg</picUrl>
            </properties>
        </developer>
    </developers>

    <!-- *** Team contributors **************************************************************************** -->

    <contributors>
        <contributor>
            <name>Eric Preulier</name>
            <email>eric.preulier@gemalto.com</email>
            <roles>
                <role>developer</role>
            </roles>
            <properties>
                <picUrl>http://cnp.gemalto.com/User%20Photos/Profile%20Pictures/epreulie_MThumb.jpg</picUrl>
            </properties>
        </contributor>
    </contributors>

    <!-- *** Properties **************************************************************************************** -->

    <properties>
        <!-- Maven parameters -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Sonar parameters -->
        <prop.sonar.jacoco.reportPath>${project.build.directory}/coverage-reports/jacoco.exec</prop.sonar.jacoco.reportPath>
        <prop.sonar.jacoco.itReportPath>${project.build.directory}/coverage-reports/jacoco-it.exec</prop.sonar.jacoco.itReportPath>
        <sonar.jacoco.reportPaths>${prop.sonar.jacoco.reportPath}, ${prop.sonar.jacoco.itReportPath}</sonar.jacoco.reportPaths>

        <!-- External Dependencies -->
        <javaee.version>7.0</javaee.version>
        <javaee-api.version>7.0</javaee-api.version>
        <cassandra.driver.version>3.7.1</cassandra.driver.version>
        <jacoco.version>0.7.9</jacoco.version>
        <junit-jupiter.version>5.1.1</junit-jupiter.version>
        <junit-platform-launcher.version>1.1.1</junit-platform-launcher.version>
        <junit-platform-surefire-provider.version>1.1.1</junit-platform-surefire-provider.version>
        <ulf.version>5.3.0</ulf.version>
        <mockito.version>2.25.1</mockito.version>
        <swagger.version>1.5.22</swagger.version>
        <pact.version>3.5.24</pact.version>
        <slf4j.version>1.7.26</slf4j.version>
        <cxf.version>3.2.7</cxf.version>
        <ota-core-lib.version>20191004-134558</ota-core-lib.version>
        <jackson.version>2.9.9</jackson.version>
        <metrics.version>3.2.6</metrics.version>
        <prometheus.version>0.7.0</prometheus.version>
        <rest-assured.version>3.1.1</rest-assured.version>
        <weld-api.version>2.4.SP2</weld-api.version>
        <weld-se-core.version>2.4.8.Final</weld-se-core.version>

        <!-- Plugin versions -->
        <asciidoctor-maven-plugin.version>1.5.6</asciidoctor-maven-plugin.version>
        <asciidoctorj-pdf.version>1.5.0-alpha.16</asciidoctorj-pdf.version>
        <build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>
        <confluence-reporting-maven-plugin.version>5.1</confluence-reporting-maven-plugin.version>
        <copy-rename-maven-plugin.version>1.0.1</copy-rename-maven-plugin.version>
        <exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>
        <jruby-complete.version>1.7.21</jruby-complete.version>
        <license-maven-plugin.version>1.16</license-maven-plugin.version>
        <maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.1.1</maven-dependency-plugin.version>
        <maven-jxr-plugin.version>2.5</maven-jxr-plugin.version>
        <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
        <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
        <maven-site-plugin.version>3.7</maven-site-plugin.version>
        <maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
        <maven-surefire-report-plugin.version>2.19.1</maven-surefire-report-plugin.version>
        <maven-war-plugin.version>3.2.0</maven-war-plugin.version>
        <pegdown.version>1.6.0</pegdown.version>
        <properties-maven-plugin.version>1.0.0</properties-maven-plugin.version>
        <replacer.version>1.5.3</replacer.version>
        <swagger2markup-maven-plugin.version>1.3.7</swagger2markup-maven-plugin.version>
        <swagger-maven-plugin.version>3.1.7</swagger-maven-plugin.version>
        <wagon-webdav-jackrabbit.version>3.2.0</wagon-webdav-jackrabbit.version>
        <yaml-properties-maven-plugin.version>1.1.3</yaml-properties-maven-plugin.version>
        <checkstyle-plugin.version>3.0.0</checkstyle-plugin.version>
        <checkstyle-core-plugin.version>8.1</checkstyle-core-plugin.version>

        <!-- Project properties -->
        <majorVersion>1</majorVersion>
        <minorVersion>0</minorVersion>
        <patchVersion>0</patchVersion>
        <revision>-dev</revision>
        <release-type>Beta</release-type>
        <buildNumber>SNAPSHOT</buildNumber>
        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>MM/dd/yyyy</maven.build.timestamp.format>
        <prop-branch-name>dev</prop-branch-name>
        <prop-env-stage-suffix>dev</prop-env-stage-suffix>
        <prop-target-helm-repo-folder>incubator</prop-target-helm-repo-folder>
        <docker.dockerfile>Dockerfile</docker.dockerfile>
        <prop-project-docker-version>${majorVersion}.${minorVersion}.${patchVersion}${revision}_build.${buildNumber}</prop-project-docker-version>
        <java.package.root>${project.groupId}.sms.gateway</java.package.root>
        <jvm.options>-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xverify:none -Xmx256m -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:ParallelGCThreads=2 -XX:CICompilerCount=2</jvm.options>

    </properties>

    <!-- *** Dependencies ************************************************************************************** -->

    <dependencies>
        <!-- provided dependencies -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>${javaee.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.sun.mail</groupId>
                    <artifactId>javax.mail</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-core</artifactId>
            <version>${cxf.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
            <version>${cxf.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomee</groupId>
            <artifactId>javaee-api</artifactId>
            <version>${javaee-api.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- compile dependencies -->
        <dependency>
            <groupId>com.gemalto.telecom.ota</groupId>
            <artifactId>ota-core-lib</artifactId>
            <version>${ota-core-lib.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.datastax.cassandra</groupId>
            <artifactId>cassandra-driver-core</artifactId>
            <version>${cassandra.driver.version}</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.github.jnr</groupId>
                    <artifactId>jnr-ffi</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.github.jnr</groupId>
                    <artifactId>jnr-posix</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.datastax.cassandra</groupId>
            <artifactId>cassandra-driver-extras</artifactId>
            <version>${cassandra.driver.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>${metrics.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-healthchecks</artifactId>
            <version>${metrics.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <version>${metrics.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-servlets</artifactId>
            <version>${metrics.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient</artifactId>
            <version>${prometheus.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_servlet</artifactId>
            <version>${prometheus.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.gemalto.rnd.logging</groupId>
            <artifactId>unified-log-format</artifactId>
            <version>${ulf.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-consumer_2.11</artifactId>
            <version>${pact.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-consumer-junit_2.11</artifactId>
            <version>${pact.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-model</artifactId>
            <version>${pact.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-provider-junit_2.12</artifactId>
            <version>${pact.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-provider-junit5_2.12</artifactId>
            <version>${pact.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-provider_2.12</artifactId>
            <version>${pact.version}</version>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld.se</groupId>
            <artifactId>weld-se-core</artifactId>
            <version>${weld-se-core.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>${junit-platform-launcher.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jacoco</groupId>
            <artifactId>org.jacoco.agent</artifactId>
            <version>${jacoco.version}</version>
            <classifier>runtime</classifier>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement/>

    <!-- ************************************************ Build ************************************************ -->
    <build>

        <finalName>${project.artifactId}</finalName>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
            <testResource>
                <directory>src/it/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>

            <!-- %%% Plugin: Code Style Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${checkstyle-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle-core-plugin.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <configuration>
                            <configLocation>${project.basedir}/style/ota_cloud_checks.xml</configLocation>
                            <cacheFile>${project.basedir}/style/checkstyle-cachefile</cacheFile>
                            <failOnViolation>true</failOnViolation>
                            <includeResources>false</includeResources>
                            <includeTestResources>false</includeTestResources>
                        </configuration>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Properties %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>${properties-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>read-project-properties-pre-clean</id>
                        <phase>pre-clean</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/profiles/${profile}/project.properties</file>
                            </files>
                        </configuration>
                    </execution>
                    <execution>
                        <id>read-project-properties</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/profiles/${profile}/project.properties</file>
                            </files>
                        </configuration>
                    </execution>
                    <execution>
                        <id>read-project-properties-pre-site</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/profiles/${profile}/project.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Build-Helper %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>get-local-ip</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>local-ip</goal>
                        </goals>
                        <configuration>
                            <localIpProperty>localhost</localIpProperty>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-it-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.basedir}/src/it/java</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>timestamp-property</id>
                        <goals>
                            <goal>timestamp-property</goal>
                        </goals>
                        <phase>pre-site</phase>
                        <configuration>
                            <name>current.year</name>
                            <pattern>yyyy</pattern>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: yaml properties maven %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>it.ozimov</groupId>
                <artifactId>yaml-properties-maven-plugin</artifactId>
                <version>${yaml-properties-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>prepare yaml properties</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/src/docker/context/configs/application.yaml</file>
                                <file>${project.basedir}/src/site/resources/yaml/application.yaml</file>
                                <file>${project.basedir}/src/site/resources/yaml/persistence.yaml</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Jacoco %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <id>config-jacoco-ut</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${prop.sonar.jacoco.reportPath}</destFile>
                            <propertyName>ut.argLine</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>config-jacoco-it</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <destFile>${prop.sonar.jacoco.itReportPath}</destFile>
                            <propertyName>it.argLine</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-report-ut-coverage</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${prop.sonar.jacoco.reportPath}</dataFile>
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-dump-it-coverage</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>dump</goal>
                        </goals>
                        <configuration>
                            <address>${project.host}</address>
                            <port>${project.port.jacoco}</port>
                            <destFile>${prop.sonar.jacoco.itReportPath}</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-report-it-coverage</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <dataFile>${prop.sonar.jacoco.itReportPath}</dataFile>
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-merge-ut-it-coverage</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <directory>${project.build.directory}/coverage-reports</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <destFile>${project.build.directory}/coverage-reports/aggregate.exec</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-report-merged-coverage</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${project.build.directory}/coverage-reports/aggregate.exec</dataFile>
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-aggregate</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: License %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>${license-maven-plugin.version}</version>
                <configuration>
                    <licenseName>gemalto</licenseName>
                    <licenseResolver>${project.baseUri}/src/license</licenseResolver>
                    <inceptionYear>2018</inceptionYear>
                    <organizationName>Gemalto</organizationName>
                    <projectName>${project.name}</projectName>
                    <outputDirectory>${project.build.directory}/docker-build/context/exploded-war/ROOT</outputDirectory>
                    <sortArtifactByName>false</sortArtifactByName>
                    <excludedScopes>test</excludedScopes>
                    <excludedGroups>com.gemalto.*|com.gemplus.*</excludedGroups>
                    <useMissingFile>true</useMissingFile>
                    <useRepositoryMissingFiles>false</useRepositoryMissingFiles>
                    <licenseMerges>
                        <licenseMerge>The Apache Software License, Version 2.0|Apache 2|Apache 2.0|The Apache License, Version 2.0|Apache License, Version 2.0|Apache License 2.0|Apache License|apache-2.0</licenseMerge>
                        <licenseMerge>The GNU Lesser General Public License, Version 2.1|GNU LESSER GENERAL PUBLIC LICENSE|GNU Lesser General Public License Version 2.1</licenseMerge>
                        <licenseMerge>The MIT License|MIT License|MIT license|MIT</licenseMerge>
                        <licenseMerge>The BSD License|BSD License|BSD license|BSD</licenseMerge>
                        <licenseMerge>Common Development and Distribution License (CDDL) + The GNU General Public License Version 2 (GPLv2) With Classpath Exception|CDDL/GPLv2+CE|CDDL + GPLv2 with classpath exception</licenseMerge>
                        <licenseMerge>The GNU General Public License, Version 2|GNU General Public License Version 2</licenseMerge>
                    </licenseMerges>
                    <failOnBlacklist>true</failOnBlacklist>
                    <excludedLicenses>GNU General Public License (GPL) version 3.0|The GNU Lesser General Public License, Version 3.0</excludedLicenses>
                </configuration>
                <executions>
                    <execution>
                        <id>update-project-license</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>update-project-license</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>add-third-party</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>add-third-party</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Resources %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
                <executions>
                    <execution>
                        <id>prepare-values</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/prepared-values</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/profiles/${profile}</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-docker-build</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/docker-build</outputDirectory>
                            <filters>
                                <filter>${project.basedir}/filters/default/filter.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/docker</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-exploded-chart</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/exploded-chart/${project.artifactId}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/helm/chart</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-chart-config</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/exploded-chart/${project.artifactId}/data/configs</outputDirectory>
                            <filters>
                                <filter>${project.basedir}/filters/configmap/filter.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/docker/context/configs</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-testResources</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>testResources</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>${project.basedir}/profiles/${profile}/project.properties</filter>
                            </filters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-ut-resources</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/test-classes</outputDirectory>
                            <filters>
                                <filter>${project.basedir}/filters/default/filter.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/docker-build/context/configs</directory>
                                    <includes>
                                        <include>application.yaml</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>prepare-site</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/prepared-site</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/site</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Dependency %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>analyze-dependencies</id>
                        <goals>
                            <!-- default phase: verify -->
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>false</failOnWarning>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-jacoco</id>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <includeArtifactIds>org.jacoco.agent</includeArtifactIds>
                            <includeClassifiers>runtime</includeClassifiers>
                            <outputDirectory>${project.build.directory}/docker-build/context/jacoco-agent</outputDirectory>
                            <stripVersion>true</stripVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Copy-Rename %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>com.coderplus.maven.plugins</groupId>
                <artifactId>copy-rename-maven-plugin</artifactId>
                <version>${copy-rename-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-third-party-list-helm</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <sourceFile>${project.build.directory}/docker-build/context/exploded-war/ROOT/THIRD-PARTY.txt</sourceFile>
                                    <destinationFile>${project.build.directory}/exploded-chart/${project.artifactId}/THIRD-PARTY</destinationFile>
                                </fileSet>
                                <fileSet>
                                    <sourceFile>${project.build.directory}/docker-build/context/exploded-war/ROOT/LICENSE.txt</sourceFile>
                                    <destinationFile>${project.build.directory}/exploded-chart/${project.artifactId}/LICENSE</destinationFile>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-third-party-list-site</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <sourceFile>${project.build.directory}/docker-build/context/exploded-war/ROOT/THIRD-PARTY.txt</sourceFile>
                                    <destinationFile>${project.build.directory}/prepared-site/resources/THIRD-PARTY.txt</destinationFile>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-values</id>
                        <phase>site</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <sourceFile>${project.build.directory}/exploded-chart/${project.artifactId}/values.yaml</sourceFile>
                                    <destinationFile>${project.build.directory}/site/chart/values.yaml</destinationFile>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Swagger (generate: swagger.json) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>com.github.kongchen</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <version>${swagger-maven-plugin.version}</version>
                <configuration>
                    <apiSources>
                        <apiSource>
                            <springmvc>false</springmvc>
                            <locations>${java.package.root}.api.rs</locations>
                            <basePath>/</basePath>
                            <info>
                                <title>${project.name}</title>
                                <description>${project.description}</description>
                                <version>${project.version}</version>
                            </info>
                            <swaggerDirectory>${project.build.directory}/docker-build/context/exploded-war/ROOT</swaggerDirectory>
                            <swaggerFileName>livedoc</swaggerFileName>
                            <!--<jsonExampleValues>true</jsonExampleValues>-->
                        </apiSource>
                    </apiSources>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-livedoc-json</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Compiler %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgs>
                        <arg>-Xlint:-processing</arg>
                        <arg>-Xlint:all</arg>
                        <arg>-Xmaxwarns</arg>
                        <arg>50000</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- TODO: Failsafe -->

            <!-- %%% Plugin: Surefire %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <argLine>${jvm.options}</argLine>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.junit.jupiter</groupId>
                        <artifactId>junit-jupiter-engine</artifactId>
                        <version>${junit-jupiter.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.junit.platform</groupId>
                        <artifactId>junit-platform-surefire-provider</artifactId>
                        <version>${junit-platform-launcher.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.junit.vintage</groupId>
                        <artifactId>junit-vintage-engine</artifactId>
                        <version>${junit-jupiter.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <configuration>
                            <argLine>${jvm.options} ${ut.argLine}</argLine>
                            <excludes>
                                <exclude>**ITTest</exclude>
                                <exclude>**ITSuite</exclude>
                            </excludes>
                            <includes>
                                <include>**Test</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>surefire-it</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <!-- variables are needed for pact verification and publication to pact broker-->
                            <systemPropertyVariables>
                                <pact.broker.host>${project.dependencies.pact-broker.host}</pact.broker.host>
                                <pact.broker.port>${project.dependencies.pact-broker.port}</pact.broker.port>
                                <pact.broker.tag>dev</pact.broker.tag>
                                <pact.provider.version>${version}</pact.provider.version>
                                <pact.verifier.publishResults>true</pact.verifier.publishResults>
                                <pact.showStacktrace>true</pact.showStacktrace>
                            </systemPropertyVariables>
                            <includes>
                                <include>**ITTest</include>
                                <include>**ITTests</include>
                                <include>**ITTestsSecurity</include>
                                <include>**ITSuite</include>
                            </includes>
                            <argLine>${jvm.options} ${it.argLine}</argLine>
                            <runOrder>alphabetical</runOrder>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: War %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <executions>
                    <execution>
                        <id>default-war</id>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                        <phase>prepare-package</phase>
                    </execution>
                </executions>
                <configuration>
                    <webResources>
                        <resource>
                            <directory>${basedir}/src/main/webapp/META-INF</directory>
                            <filtering>true</filtering>
                            <targetPath>META-INF</targetPath>
                        </resource>
                    </webResources>
                    <webappDirectory>${project.build.directory}/docker-build/context/exploded-war/ROOT</webappDirectory>
                </configuration>
            </plugin>

            <!-- %%% Plugin: Exec %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>exec-helm-lint</id>
                        <phase>test</phase>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>lint ${project.build.directory}/exploded-chart/${project.artifactId}</commandlineArgs>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-docker-build</id>
                        <phase>package</phase>
                        <configuration>
                            <executable>docker</executable>
                            <commandlineArgs>build --no-cache -t ${project.dependencies.docker.registry}/ota-cloud/${project.artifactId}:${prop-project-docker-version} -f ${project.build.directory}/docker-build/${docker.dockerfile} ${project.build.directory}/docker-build</commandlineArgs>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-helm-init</id>
                        <phase>package</phase>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>init --client-only</commandlineArgs>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-helm-delete</id>
                        <phase>package</phase>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>delete ${project.dependencies.helm.releasename} --purge</commandlineArgs>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-helm-package</id>
                        <phase>package</phase>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>package ${project.build.directory}/exploded-chart/${project.artifactId} -d ${project.build.directory}</commandlineArgs>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-db-cleanup</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>kubectl</executable>
                            <successCodes>0,2</successCodes>
                            <arguments>
                                <argument>exec</argument>
                                <argument>-n</argument>
                                <argument>${project.dependencies.helm.namespace}</argument>
                                <argument>-i</argument>
                                <argument>cassandra-0</argument>
                                <argument>--</argument>
                                <argument>cqlsh</argument>
                                <argument>-e</argument>
                                <argument>DROP KEYSPACE IF EXISTS ${project.dependencies.cassandra.keyspace.prefix}_${project.dependencies.cassandra.keyspace};</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-db-cleanup-no-prefix</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>kubectl</executable>
                            <arguments>
                                <argument>-n</argument>
                                <argument>${project.dependencies.helm.namespace}</argument>
                                <argument>exec</argument>
                                <argument>-i</argument>
                                <argument>cassandra-0</argument>
                                <argument>--</argument>
                                <argument>cqlsh</argument>
                                <argument>-e</argument>
                                <argument>DROP KEYSPACE IF EXISTS ${project.dependencies.cassandra.keyspace};</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-helm-install</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>install ${project.build.directory}/${project.artifactId}-${project.version}.tgz -f ${project.build.directory}/prepared-values/values.yaml --name ${project.dependencies.helm.releasename} --namespace ${project.dependencies.helm.namespace} --debug</commandlineArgs>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-HttpStatusChecker</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>${java.package.root}.util.HttpStatusChecker</mainClass>
                            <arguments>
                                <argument>${project.host}:${project.port}</argument>
                            </arguments>
                            <classpathScope>test</classpathScope>
                        </configuration>
                    </execution>
                    <execution>
                        <id>metrics-site</id>
                        <phase>pre-site</phase>
                        <configuration>
                            <mainClass>com.gemalto.telecom.components.monitoring.parser.DropWizardParser</mainClass>
                            <arguments>
                                <argument>${project.host}</argument>
                                <argument>${project.port}</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: PACT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>au.com.dius</groupId>
                <artifactId>pact-jvm-provider-maven_2.11</artifactId>
                <version>${pact.version}</version>
                <configuration>
                    <pactBrokerUrl>http://${project.dependencies.pact-broker.host}:${project.dependencies.pact-broker.port}</pactBrokerUrl>
                    <projectVersion>${project.version}</projectVersion>
                    <tags>
                        <tag>dev</tag>
                    </tags>
                    <failIfNoPactsFound>false</failIfNoPactsFound>
                    <!--<configuration>-->
                        <!--<pact.showFullDiff>true</pact.showFullDiff>-->
                        <!--<pact.showStacktrace>true</pact.showStacktrace>-->
                        <!--<pact.verifier.publishResults>true</pact.verifier.publishResults>-->
                    <!--</configuration>-->
                </configuration>
                <executions>
                    <execution>
                        <id>pact-broker</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>publish</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: Replacer %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>${replacer.version}</version>
                <executions>
                    <execution>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <basedir>${project.build.directory}/prepared-site/markdown</basedir>
                    <includes>
                        <include>*.md</include>
                    </includes>
                    <replacements>
                        <replacement>
                            <token>\{</token>
                            <value></value>
                        </replacement>
                        <replacement>
                            <token>\$</token>
                            <value></value>
                        </replacement>
                        <replacement>
                            <token>\}</token>
                            <value></value>
                        </replacement>
                    </replacements>
                </configuration>
            </plugin>

            <!-- %%% Plugin: Swagger2Markup (generate: *.md)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
                <version>${swagger2markup-maven-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.pegdown</groupId>
                        <artifactId>pegdown</artifactId>
                        <version>${pegdown.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>generate-swagger-md</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                        <configuration>
                            <swaggerInput>${project.build.directory}/docker-build/context/exploded-war/ROOT/livedoc.json</swaggerInput>
                            <outputDir>${project.build.directory}/prepared-site/confluence</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>CONFLUENCE_MARKUP</swagger2markup.markupLanguage>
                            </config>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-swagger-adoc</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                        <configuration>
                            <swaggerInput>${project.build.directory}/docker-build/context/exploded-war/ROOT/livedoc.json</swaggerInput>
                            <outputDir>${project.build.directory}/prepared-site/asciidoc</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                            </config>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: ASCIIDoctor (generate: swagger.pdf) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>${asciidoctor-maven-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>${asciidoctorj-pdf.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>${jruby-complete.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>generate-livedoc-pdf</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <sourceDirectory>${project.build.directory}/prepared-site/asciidoc/
                            </sourceDirectory>
                            <sourceDocumentName>swagger.adoc</sourceDocumentName>
                            <outputDirectory>${project.build.directory}/site/pdf</outputDirectory>
                            <attributes>
                                <pdf-stylesdir>${project.basedir}/src/site/resources/themes/gemalto</pdf-stylesdir>
                                <pdf-style>gemalto-telecom</pdf-style>
                                <pdf-fontsdir>${project.basedir}/src/site/resources/themes/gemalto/fonts/DINPro</pdf-fontsdir>
                            </attributes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- %%% Plugin: confluence report %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.bsc.maven</groupId>
                <artifactId>confluence-reporting-maven-plugin</artifactId>
                <version>${confluence-reporting-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>deploy confluence site</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <endPoint>https://confluence.gemalto.com/rest/api</endPoint>
                    <spaceKey>OTACD</spaceKey>
                    <parentPageTitle>OTA Cloud Documentation</parentPageTitle>
                    <serverId>confluence</serverId>
                    <siteDescriptor>${project.build.directory}/prepared-site/confluence/site.xml</siteDescriptor>
                    <labels>
                        <label>OTAC</label>
                        <label>Microservice</label>
                        <label>Dev</label>
                    </labels>
                </configuration>
            </plugin>

            <!-- %%% Plugin: Site %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.wagon</groupId>
                        <artifactId>wagon-webdav-jackrabbit</artifactId>
                        <version>${wagon-webdav-jackrabbit.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>${asciidoctor-maven-plugin.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <siteDirectory>${project.build.directory}/prepared-site</siteDirectory>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <!-- *** Reporting ***************************************************************************************** -->

    <reporting>
        <plugins>

            <!-- %%% Plugin: JXR %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${maven-jxr-plugin.version}</version>
            </plugin>

            <!-- %%% Plugin: Project-Info-Reports %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
            </plugin>

            <!-- %%% Plugin: Surefire-Report %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-report-plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report-only</report>
                            <report>failsafe-report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

        </plugins>
    </reporting>

    <!-- *** Profiles ****************************************************************************************** -->

    <profiles>

        <!-- === dev ============================================================================================= -->

        <profile>
            <id>dev</id>
            <properties>
                <profile>dev</profile>
            </properties>
        </profile>

        <!-- === testing ========================================================================================= -->

        <profile>
            <id>testing</id>
            <properties>
                <profile>testing</profile>
            </properties>
            <build>
                <plugins>
                    <!-- %%% Plugin: Exec %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${exec-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>exec-docker-internal-push</id>
                                <phase>package</phase>
                                <configuration>
                                    <executable>docker</executable>
                                    <commandlineArgs>push ${project.dependencies.docker.registry}/ota-cloud/${project.artifactId}:${prop-project-docker-version}</commandlineArgs>
                                </configuration>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>exec-docker-official-push</id>
                                <phase>deploy</phase>
                                <configuration>
                                    <executable>docker</executable>
                                    <commandlineArgs>push dockerhub.gemalto.com/ota-cloud/${project.artifactId}:${prop-project-docker-version}</commandlineArgs>
                                </configuration>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>